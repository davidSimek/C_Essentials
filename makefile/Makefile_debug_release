# You have to specify values in <>

CC = gcc                   # Compiler (GNU Compiler Collection)

# Build configuration
CFLAGS_RELEASE = -<flag> \ # Release flags
                 -<flag>

CFLAGS_DEBUG   = -<flag> \ # Debug flags
                 -<flag>

SRC_DIR = <src_directory>       # Directory containing source files and test.c with its own main function
OBJ_DIR = $(BUILD_TYPE)_obj     # Directory to store object files based on build type
TARGET = $(BUILD_TYPE)_program  # Name of the final executable based on build type

# Source files
SRC = $(wildcard $(SRC_DIR)/*.c)  # Find all .c source files in the source directory
SRC_TEST = $(SRC_DIR)/test.c      # Test source file

# Object files
OBJ = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(filter-out $(SRC_TEST),$(SRC)))  # Convert .c files to .o files, excluding test.c
OBJ_TEST = $(OBJ_DIR)/$(notdir $(SRC_TEST:.c=.o))  # Object file for test.c

$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

# Default is release
all: release

# Release build
release: CFLAGS = $(CFLAGS_RELEASE)
release: $(OBJ_DIR) $(TARGET)

# Debug build
debug: CFLAGS = $(CFLAGS_DEBUG)
debug: $(OBJ_DIR) $(TARGET)

# Linking
$(TARGET): $(OBJ) $(OBJ_TEST)
	$(CC) $(OBJ) $(OBJ_TEST) -o $@ $(CFLAGS)

# Compiling object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJ_DIR)/$(notdir $(SRC_TEST:.c=.o)): $(SRC_TEST) | $(OBJ_DIR)
	$(CC) $(CFLAGS) -c $(SRC_TEST) -o $@

clean:
	rm -rf *_obj $(TARGET)

.PHONY: all release debug clean
